{
  "address": "0x25e36B0214E78C894db80318A9b6b62Ef6D4E12f",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "sponsorChainId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogMetaTxRequestAsyncGasTankFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "bytes32",
          "name": "taskId",
          "type": "bytes32"
        }
      ],
      "name": "LogMetaTxRequestSyncGasTankFee",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGasTank",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGasTank",
          "type": "address"
        }
      ],
      "name": "LogSetGasTank",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "address",
          "name": "oldGasTankAdmin",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "newGasTankAdmin",
          "type": "address"
        }
      ],
      "name": "LogSetGasTankAdmin",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "METATX_REQUEST_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasTank",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gasTankAdmin",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getDomainSeparator",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTankAdmin",
          "type": "address"
        }
      ],
      "name": "init",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "paymentType",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "maxFee",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "sponsorChainId",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            }
          ],
          "internalType": "struct MetaTxRequest",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "bytes",
          "name": "_sponsorSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gelatoFee",
          "type": "uint256"
        },
        {
          "internalType": "bytes32",
          "name": "_taskId",
          "type": "bytes32"
        }
      ],
      "name": "metaTxRequestGasTankFee",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTank",
          "type": "address"
        }
      ],
      "name": "setGasTank",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gasTankAdmin",
          "type": "address"
        }
      ],
      "name": "setGasTankAdmin",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0x104f1585466efbae35529442b1791764fb42c286a6a6f8663e4439a926e28bd3",
  "receipt": {
    "to": null,
    "from": "0x3BEC8d1f7Bcb11F9c5cdF56E0d72a26040B2338F",
    "contractAddress": "0x25e36B0214E78C894db80318A9b6b62Ef6D4E12f",
    "transactionIndex": 0,
    "gasUsed": "1469448",
    "logsBloom": "0x
    "blockHash": "0xb311ee666cb0dd1b01cb4e48668d6843a34bb3b5260323023d1b43473bf2bd12",
    "transactionHash": "0x104f1585466efbae35529442b1791764fb42c286a6a6f8663e4439a926e28bd3",
    "logs": [],
    "blockNumber": 6877013,
    "cumulativeGasUsed": "1469448",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x683913B3A32ada4F8100458A3E1675425BdAa7DF"
  ],
  "numDeployments": 1,
  "solcInputHash": "07d9e0e51d624db3a8352ca337e57f64",
  "metadata": "{\"compiler\":{\"version\":\"0.8.13+commit.abaa5c0e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogMetaTxRequestAsyncGasTankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"bytes32\",\"name\":\"taskId\",\"type\":\"bytes32\"}],\"name\":\"LogMetaTxRequestSyncGasTankFee\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGasTank\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGasTank\",\"type\":\"address\"}],\"name\":\"LogSetGasTank\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"address\",\"name\":\"oldGasTankAdmin\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"newGasTankAdmin\",\"type\":\"address\"}],\"name\":\"LogSetGasTankAdmin\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"METATX_REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasTank\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gasTankAdmin\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getDomainSeparator\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTankAdmin\",\"type\":\"address\"}],\"name\":\"init\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"paymentType\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"maxFee\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"sponsorChainId\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"}],\"internalType\":\"struct MetaTxRequest\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"bytes\",\"name\":\"_sponsorSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoFee\",\"type\":\"uint256\"},{\"internalType\":\"bytes32\",\"name\":\"_taskId\",\"type\":\"bytes32\"}],\"name\":\"metaTxRequestGasTankFee\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTank\",\"type\":\"address\"}],\"name\":\"setGasTank\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gasTankAdmin\",\"type\":\"address\"}],\"name\":\"setGasTankAdmin\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maliciously crafted transaction payloads could wipe out any funds left here.\",\"kind\":\"dev\",\"methods\":{\"metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,bytes32)\":{\"params\":{\"_gelatoFee\":\"Fee to be charged by Gelato relayer, denominated in _req.feeToken\",\"_req\":\"Relay request data\",\"_sponsorSignature\":\"EIP-712 compliant signature from _req.sponsor                          (can be same as _userSignature)\",\"_userSignature\":\"EIP-712 compliant signature from _req.user\"}}},\"title\":\"Gelato Meta Box contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,bytes32)\":{\"notice\":\"Relay request + async Gas Tank payment deductions (off-chain accounting)EOA that originates the tx, but does not necessarily pay the relayer\"}},\"notice\":\"This contract must NEVER hold funds!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoMetaBox.sol\":\"GelatoMetaBox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() initializer {}\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     */\\n    bool private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Modifier to protect an initializer function from being invoked twice.\\n     */\\n    modifier initializer() {\\n        // If the contract is initializing we ignore whether _initialized is set in order to support multiple\\n        // inheritance patterns, but we only do this in the context of a constructor, because in other contexts the\\n        // contract may have been reentered.\\n        require(_initializing ? _isConstructor() : !_initialized, \\\"Initializable: contract is already initialized\\\");\\n\\n        bool isTopLevelCall = !_initializing;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n            _initialized = true;\\n        }\\n\\n        _;\\n\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n        }\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} modifier, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    function _isConstructor() private view returns (bool) {\\n        return !AddressUpgradeable.isContract(address(this));\\n    }\\n}\\n\",\"keccak256\":\"0x68861bcc80cacbd498efde75aab6c74a486cc48262660d326c8d7530d9752097\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x3f0f878c796dfc7feba6d3c4e3e526c14c7deae8b7bfc71088e3f38fab0d77b3\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/utils/SafeERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../IERC20.sol\\\";\\nimport \\\"../../../utils/Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0xc3d946432c0ddbb1f846a0d3985be71299df331b91d06732152117f62f0be2b5\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Address.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x51b758a8815ecc9596c66c37d56b1d33883a444631a3f916b9fe65cb863ef7c4\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/GelatoMetaBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {MetaTxRequest} from \\\"./structs/RequestTypes.sol\\\";\\nimport {NATIVE_TOKEN} from \\\"./constants/Tokens.sol\\\";\\nimport {GelatoMetaBoxBase} from \\\"./base/GelatoMetaBoxBase.sol\\\";\\nimport {GelatoCallUtils} from \\\"./gelato/GelatoCallUtils.sol\\\";\\nimport {GelatoTokenUtils} from \\\"./gelato/GelatoTokenUtils.sol\\\";\\nimport {Proxied} from \\\"./vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\nimport {\\n    Initializable\\n} from \\\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\\\";\\n\\n/// @title Gelato Meta Box contract\\n/// @notice This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\\ncontract GelatoMetaBox is Proxied, Initializable, GelatoMetaBoxBase {\\n    address public immutable gelato;\\n    uint256 public immutable chainId;\\n\\n    mapping(address => uint256) public nonce;\\n    address public gasTank;\\n    address public gasTankAdmin;\\n\\n    event LogMetaTxRequestAsyncGasTankFee(\\n        address indexed sponsor,\\n        address indexed user,\\n        address indexed target,\\n        uint256 sponsorChainId,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogMetaTxRequestSyncGasTankFee(\\n        address indexed sponsor,\\n        address indexed user,\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee,\\n        bytes32 taskId\\n    );\\n\\n    event LogSetGasTank(address oldGasTank, address newGasTank);\\n\\n    event LogSetGasTankAdmin(address oldGasTankAdmin, address newGasTankAdmin);\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    modifier onlyGasTankAdmin() {\\n        require(msg.sender == gasTankAdmin, \\\"Only callable by gasTankAdmin\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n\\n        uint256 _chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _chainId := chainid()\\n        }\\n\\n        chainId = _chainId;\\n    }\\n\\n    function init(address _gasTankAdmin) external initializer {\\n        gasTankAdmin = _gasTankAdmin;\\n\\n        emit LogSetGasTankAdmin(address(0), _gasTankAdmin);\\n    }\\n\\n    function setGasTank(address _gasTank) external onlyGasTankAdmin {\\n        require(_gasTank != address(0), \\\"Invalid gasTank address\\\");\\n\\n        emit LogSetGasTank(gasTank, _gasTank);\\n\\n        gasTank = _gasTank;\\n    }\\n\\n    function setGasTankAdmin(address _gasTankAdmin) external onlyGasTankAdmin {\\n        require(_gasTankAdmin != address(0), \\\"Invalid gasTankAdmin address\\\");\\n\\n        emit LogSetGasTankAdmin(gasTankAdmin, _gasTankAdmin);\\n\\n        gasTankAdmin = _gasTankAdmin;\\n    }\\n\\n    /// @notice Relay request + async Gas Tank payment deductions (off-chain accounting)\\n    /// @param _req Relay request data\\n    /// @param _userSignature EIP-712 compliant signature from _req.user\\n    /// @param _sponsorSignature EIP-712 compliant signature from _req.sponsor\\n    ///                          (can be same as _userSignature)\\n    /// @notice   EOA that originates the tx, but does not necessarily pay the relayer\\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\\n    // solhint-disable-next-line function-max-lines\\n    function metaTxRequestGasTankFee(\\n        MetaTxRequest calldata _req,\\n        bytes calldata _userSignature,\\n        bytes calldata _sponsorSignature,\\n        uint256 _gelatoFee,\\n        bytes32 _taskId\\n    ) external onlyGelato {\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _req.deadline == 0 || _req.deadline >= block.timestamp,\\n            \\\"Request expired\\\"\\n        );\\n\\n        require(_req.chainId == chainId, \\\"Wrong chainId\\\");\\n\\n        require(\\n            _req.paymentType == 1 || _req.paymentType == 2,\\n            \\\"paymentType must be 1 or 2\\\"\\n        );\\n\\n        require(_gelatoFee <= _req.maxFee, \\\"Executor over-charged\\\");\\n\\n        // Verify and increment user's nonce\\n        uint256 userNonce = nonce[_req.user];\\n        require(_req.nonce == userNonce, \\\"Invalid nonce\\\");\\n        nonce[_req.user] = userNonce + 1;\\n\\n        _verifyMetaTxRequestSignature(_req, _userSignature, _req.user);\\n        // If is sponsored tx, we also verify sponsor's signature\\n        if (_req.user != _req.sponsor) {\\n            _verifyMetaTxRequestSignature(\\n                _req,\\n                _sponsorSignature,\\n                _req.sponsor\\n            );\\n        }\\n\\n        require(_req.target != gasTank, \\\"target address cannot be gasTank\\\");\\n        require(_isContract(_req.target), \\\"Cannot call EOA\\\");\\n        (bool success, ) = _req.target.call(\\n            abi.encodePacked(_req.data, _req.user)\\n        );\\n        require(success, \\\"External call failed\\\");\\n\\n        if (_req.paymentType == 1) {\\n            emit LogMetaTxRequestAsyncGasTankFee(\\n                _req.sponsor,\\n                _req.user,\\n                _req.target,\\n                _req.sponsorChainId == 0 ? chainId : _req.sponsorChainId,\\n                _req.feeToken,\\n                _gelatoFee,\\n                _taskId\\n            );\\n        } else {\\n            // TODO: deduct balance from GasTank\\n            emit LogMetaTxRequestSyncGasTankFee(\\n                _req.sponsor,\\n                _req.user,\\n                _req.target,\\n                _req.feeToken,\\n                _gelatoFee,\\n                _taskId\\n            );\\n        }\\n    }\\n\\n    function getDomainSeparator() public view returns (bytes32) {\\n        return _getDomainSeparator(chainId);\\n    }\\n}\\n\",\"keccak256\":\"0xb4627878bd2d9e2f287bd824ffec4483bd40841fdf19b89abc1bcc559b48f581\",\"license\":\"MIT\"},\"contracts/base/GelatoMetaBoxBase.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {MetaTxRequest} from \\\"../structs/RequestTypes.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\nabstract contract GelatoMetaBoxBase {\\n    bytes32 public constant METATX_REQUEST_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"MetaTxRequest(uint256 chainId,address target,bytes data,address feeToken,uint256 paymentType,uint256 maxFee,address user,address sponsor,uint256 sponsorChainId,uint256 nonce,uint256 deadline)\\\"\\n            )\\n        );\\n    // solhint-disable-next-line max-line-length\\n    string public constant EIP712_DOMAIN_TYPE =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    function _getDomainSeparator(uint256 _chainId)\\n        internal\\n        view\\n        returns (bytes32)\\n    {\\n        return\\n            keccak256(\\n                abi.encode(\\n                    keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n                    keccak256(bytes(\\\"GelatoMetaBox\\\")),\\n                    keccak256(bytes(\\\"V1\\\")),\\n                    bytes32(_chainId),\\n                    address(this)\\n                )\\n            );\\n    }\\n\\n    function _verifyMetaTxRequestSignature(\\n        MetaTxRequest calldata _req,\\n        bytes calldata _signature,\\n        address _expectedSigner\\n    ) internal view {\\n        bytes32 domainSeparator = _getDomainSeparator(_req.chainId);\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(_abiEncodeMetaTxRequest(_req))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _signature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _expectedSigner,\\n            \\\"Invalid signature\\\"\\n        );\\n    }\\n\\n    function _isContract(address _account) internal view returns (bool) {\\n        return _account.code.length > 0;\\n    }\\n\\n    function _abiEncodeMetaTxRequest(MetaTxRequest calldata _req)\\n        internal\\n        pure\\n        returns (bytes memory encodedReq)\\n    {\\n        encodedReq = abi.encode(\\n            METATX_REQUEST_TYPEHASH,\\n            _req.chainId,\\n            _req.target,\\n            keccak256(_req.data),\\n            _req.feeToken,\\n            _req.paymentType,\\n            _req.maxFee,\\n            _req.user,\\n            _req.sponsor,\\n            _req.sponsorChainId,\\n            _req.nonce,\\n            _req.deadline\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0xa18a177f82af70ae6e9c11a40c39f8d60d4f6b93beb52ab8a631f11981a1d5fb\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xb55414b6ea76ab5b3a60bc5f431bdc21301b1a437df1df89850e08e58669908e\",\"license\":\"MIT\"},\"contracts/gelato/GelatoCallUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nlibrary GelatoCallUtils {\\n    /// @dev Safe generalized external call:\\n    ///      Ensures that _dest is not EOA + does not read call's return data\\n    function safeExternalCall(address _dest, bytes calldata _data) internal {\\n        require(\\n            _dest.code.length > 0,\\n            \\\"GelatoCallUtils.safeExternalCall: _dest cannot be EOA\\\"\\n        );\\n\\n        (bool success, ) = _dest.call(_data);\\n        require(\\n            success,\\n            \\\"GelatoCallUtils.safeExternalCall: External call failed\\\"\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x55ddd36bcde15252f355f6b802df83590b6c58f8e3aaf472d2569804d594a0d3\",\"license\":\"MIT\"},\"contracts/gelato/GelatoTokenUtils.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\nimport {NATIVE_TOKEN} from \\\"../constants/Tokens.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {\\n    SafeERC20\\n} from \\\"@openzeppelin/contracts/token/ERC20/utils/SafeERC20.sol\\\";\\n\\nlibrary GelatoTokenUtils {\\n    function transferToGelato(\\n        address _gelato,\\n        address _token,\\n        uint256 _amount\\n    ) internal {\\n        if (_amount == 0) return;\\n\\n        if (_token == NATIVE_TOKEN) {\\n            (bool success, ) = _gelato.call{value: _amount}(\\\"\\\");\\n            require(success, \\\"transferGelato: Gelato ETH transfer failed\\\");\\n        } else {\\n            SafeERC20.safeTransfer(IERC20(_token), _gelato, _amount);\\n        }\\n    }\\n\\n    function getBalance(address token, address user)\\n        internal\\n        view\\n        returns (uint256)\\n    {\\n        return\\n            token == NATIVE_TOKEN\\n                ? user.balance\\n                : IERC20(token).balanceOf(user);\\n    }\\n}\\n\",\"keccak256\":\"0xeefb320e7bc021d592227b1c7236a0e78894e3d35965698e8dd6faafadb6eadc\",\"license\":\"MIT\"},\"contracts/structs/RequestTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.13;\\n\\n// Relay request with built-in MetaTx support with signature verification on behalf of user\\n// In case a sponsor (other than user) wants to pay for the tx,\\n// we will also need to verify sponsor's signature\\nstruct MetaTxRequest {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address feeToken;\\n    uint256 paymentType;\\n    uint256 maxFee;\\n    address user;\\n    address sponsor; // could be same as user\\n    uint256 sponsorChainId;\\n    uint256 nonce;\\n    uint256 deadline;\\n}\\n\\n// Similar to MetaTxRequest, but no need to implement user-specific signature verification logic\\n// Only sponsor signature is verified in order to ensure integrity of fee payments\\nstruct ForwardRequest {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address feeToken;\\n    uint256 paymentType;\\n    uint256 maxFee;\\n    address sponsor;\\n    uint256 sponsorChainId;\\n    uint256 nonce;\\n    bool enforceSponsorNonce;\\n}\\n\",\"keccak256\":\"0x3834e1d153c46347b25d9b0e7d61b99eb25e6c9eb72e7e938f97befcd10ab8e3\",\"license\":\"MIT\"},\"contracts/vendor/hardhat-deploy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    // solhint-disable-next-line max-line-length\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41a0b2fa7a61b91ebe122ce6443fbf1d0849c019e7b4dec5f02f1a8bc8b1fd8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b50604051611a79380380611a7983398101604081905261002f91610044565b6001600160a01b03166080524660a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a0516119c46100b5600039600081816101e0015281816106ae01528181610cd80152610fec01526000818161016601526105a601526119c46000f3fe608060405234801561001057600080fd5b50600436106100d45760003560e01c806370ae92d211610081578063ac4cae3a1161005b578063ac4cae3a14610202578063c3f28abd14610215578063ed24911d1461022a57600080fd5b806370ae92d21461019b5780637be52e59146101bb5780639a8a0592146101db57600080fd5b806348271fa0116100b257806348271fa01461011c578063573ea5751461016157806364934c3e1461018857600080fd5b806319ab453c146100d95780633e40957d146100ee57806343e297b214610109575b600080fd5b6100ec6100e7366004611598565b610232565b005b6100f66103d2565b6040519081526020015b60405180910390f35b6100ec610117366004611598565b6103f5565b60035461013c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6100ec610196366004611617565b61058e565b6100f66101a9366004611598565b60016020526000908152604090205481565b60025461013c9073ffffffffffffffffffffffffffffffffffffffff1681565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6100ec610210366004611598565b610e30565b61021d610fc9565b60405161010091906116f4565b6100f6610fe5565b600054610100900460ff1661024d5760005460ff1615610251565b303b155b6102e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561032157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155604080516000815260208101929092527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a180156103ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6040518060e0016040528060bf815260200161187e60bf91398051906020012081565b60035473ffffffffffffffffffffffffffffffffffffffff163314610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e00000060448201526064016102d9565b73ffffffffffffffffffffffffffffffffffffffff81166104f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642067617354616e6b206164647265737300000000000000000060448201526064016102d9565b6002546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f646b74924371efeac02b8806e41f72490eaa858cf528e6f59768d6bbcea84fba910160405180910390a1600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064016102d9565b610140870135158061064457504287610140013510155b6106aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526571756573742065787069726564000000000000000000000000000000000060448201526064016102d9565b86357f000000000000000000000000000000000000000000000000000000000000000014610734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e49640000000000000000000000000000000000000060448201526064016102d9565b86608001356001148061074b575086608001356002145b6107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f72203200000000000060448201526064016102d9565b8660a0013582111561081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4578656375746f72206f7665722d63686172676564000000000000000000000060448201526064016102d9565b600060018161083460e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080886101200135146108df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e63650000000000000000000000000000000000000060448201526064016102d9565b6108ea816001611745565b600160006108fe60e08c0160c08d01611598565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205561094088888861093b60e0840160c08501611598565b611015565b610951610100890160e08a01611598565b73ffffffffffffffffffffffffffffffffffffffff1661097760e08a0160c08b01611598565b73ffffffffffffffffffffffffffffffffffffffff16146109a9576109a988868661093b610100840160e08501611598565b60025473ffffffffffffffffffffffffffffffffffffffff166109d260408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff1603610a4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b60448201526064016102d9565b610a7e610a6260408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b610ae4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f41000000000000000000000000000000000060448201526064016102d9565b6000610af660408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610b1960408b018b611784565b610b2960e08d0160c08e01611598565b604051602001610b3b939291906117e9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610b7391611822565b6000604051808303816000865af19150503d8060008114610bb0576040519150601f19603f3d011682016040523d82523d6000602084013e610bb5565b606091505b5050905080610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f45787465726e616c2063616c6c206661696c656400000000000000000000000060448201526064016102d9565b8860800135600103610d4b57610c3c60408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610c6260e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff16610c896101008c0160e08d01611598565b73ffffffffffffffffffffffffffffffffffffffff167f16242369046bb2c7332fc0c95dd99d425572accb515027a97630cadf2dfafb7c6101008d013515610cd6578c6101000135610cf8565b7f00000000000000000000000000000000000000000000000000000000000000005b8d6060016020810190610d0b9190611598565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015281018990526060810188905260800160405180910390a4610e25565b610d5b60408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610d8160e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff16610da86101008c0160e08d01611598565b73ffffffffffffffffffffffffffffffffffffffff167fa3f8da1c59eb950d4098996c44c53e9692e2c5d73cd186cb415376d31d5ba7c6610def60808e0160608f01611598565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018a9052810188905260600160405180910390a45b505050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e00000060448201526064016102d9565b73ffffffffffffffffffffffffffffffffffffffff8116610f2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c69642067617354616e6b41646d696e20616464726573730000000060448201526064016102d9565b6003546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a1600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60405180608001604052806052815260200161193d6052913981565b60006110107f0000000000000000000000000000000000000000000000000000000000000000611192565b905090565b60006110218535611192565b905060008161102f87611298565b80516020918201206040516110769392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806110d18388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113ca92505050565b909250905060008160048111156110ea576110ea61183e565b14801561112257508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016102d9565b5050505050505050565b600060405180608001604052806052815260200161193d605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a22836060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b60606040518060e0016040528060bf815260200161187e60bf91398051602091820120908335906112cf9060408601908601611598565b6112dc6040860186611784565b6040516112ea92919061186d565b6040519081900390206113036080870160608801611598565b608087013560a088013561131d60e08a0160c08b01611598565b61132e6101008b0160e08c01611598565b60408051602081019a909a5289019790975273ffffffffffffffffffffffffffffffffffffffff9586166060890152608088019490945291841660a087015260c086015260e08501528116610100848101919091529116610120838101919091529084013561014083810191909152908401356101608301528301356101808201526101a0016040516020818303038152906040529050919050565b60008082516041036114005760208301516040840151606085015160001a6113f487828585611438565b94509450505050611431565b8251604003611429576020830151604084015161141e868383611550565b935093505050611431565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561146f5750600090506003611547565b8460ff16601b1415801561148757508460ff16601c14155b156114985750600090506004611547565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114ec573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661154057600060019250925050611547565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161158a87828885611438565b935093505050935093915050565b6000602082840312156115aa57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146115ce57600080fd5b9392505050565b60008083601f8401126115e757600080fd5b50813567ffffffffffffffff8111156115ff57600080fd5b60208301915083602082850101111561143157600080fd5b600080600080600080600060a0888a03121561163257600080fd5b873567ffffffffffffffff8082111561164a57600080fd5b90890190610160828c03121561165f57600080fd5b9097506020890135908082111561167557600080fd5b6116818b838c016115d5565b909850965060408a013591508082111561169a57600080fd5b506116a78a828b016115d5565b989b979a5095989597966060870135966080013595509350505050565b60005b838110156116df5781810151838201526020016116c7565b838111156116ee576000848401525b50505050565b60208152600082518060208401526117138160408501602087016116c4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561177f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117b957600080fd5b83018035915067ffffffffffffffff8211156117d457600080fd5b60200191503681900382131561143157600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b600082516118348184602087016116c4565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b818382376000910190815291905056fe4d6574615478526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c6164647265737320757365722c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212200829e042f3968f3d15244c2fcd2cf2474f87bc44d27ea57d67f040ec5458cc4b64736f6c634300080d0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100d45760003560e01c806370ae92d211610081578063ac4cae3a1161005b578063ac4cae3a14610202578063c3f28abd14610215578063ed24911d1461022a57600080fd5b806370ae92d21461019b5780637be52e59146101bb5780639a8a0592146101db57600080fd5b806348271fa0116100b257806348271fa01461011c578063573ea5751461016157806364934c3e1461018857600080fd5b806319ab453c146100d95780633e40957d146100ee57806343e297b214610109575b600080fd5b6100ec6100e7366004611598565b610232565b005b6100f66103d2565b6040519081526020015b60405180910390f35b6100ec610117366004611598565b6103f5565b60035461013c9073ffffffffffffffffffffffffffffffffffffffff1681565b60405173ffffffffffffffffffffffffffffffffffffffff9091168152602001610100565b61013c7f000000000000000000000000000000000000000000000000000000000000000081565b6100ec610196366004611617565b61058e565b6100f66101a9366004611598565b60016020526000908152604090205481565b60025461013c9073ffffffffffffffffffffffffffffffffffffffff1681565b6100f67f000000000000000000000000000000000000000000000000000000000000000081565b6100ec610210366004611598565b610e30565b61021d610fc9565b60405161010091906116f4565b6100f6610fe5565b600054610100900460ff1661024d5760005460ff1615610251565b303b155b6102e2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201527f647920696e697469616c697a656400000000000000000000000000000000000060648201526084015b60405180910390fd5b600054610100900460ff1615801561032157600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff0000166101011790555b600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8416908117909155604080516000815260208101929092527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a180156103ce57600080547fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00ff1690555b5050565b6040518060e0016040528060bf815260200161187e60bf91398051906020012081565b60035473ffffffffffffffffffffffffffffffffffffffff163314610476576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e00000060448201526064016102d9565b73ffffffffffffffffffffffffffffffffffffffff81166104f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f496e76616c69642067617354616e6b206164647265737300000000000000000060448201526064016102d9565b6002546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f646b74924371efeac02b8806e41f72490eaa858cf528e6f59768d6bbcea84fba910160405180910390a1600280547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b3373ffffffffffffffffffffffffffffffffffffffff7f0000000000000000000000000000000000000000000000000000000000000000161461062d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064016102d9565b610140870135158061064457504287610140013510155b6106aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526571756573742065787069726564000000000000000000000000000000000060448201526064016102d9565b86357f000000000000000000000000000000000000000000000000000000000000000014610734576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e49640000000000000000000000000000000000000060448201526064016102d9565b86608001356001148061074b575086608001356002145b6107b1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601a60248201527f7061796d656e7454797065206d7573742062652031206f72203200000000000060448201526064016102d9565b8660a0013582111561081f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601560248201527f4578656375746f72206f7665722d63686172676564000000000000000000000060448201526064016102d9565b600060018161083460e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002054905080886101200135146108df576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e63650000000000000000000000000000000000000060448201526064016102d9565b6108ea816001611745565b600160006108fe60e08c0160c08d01611598565b73ffffffffffffffffffffffffffffffffffffffff16815260208101919091526040016000205561094088888861093b60e0840160c08501611598565b611015565b610951610100890160e08a01611598565b73ffffffffffffffffffffffffffffffffffffffff1661097760e08a0160c08b01611598565b73ffffffffffffffffffffffffffffffffffffffff16146109a9576109a988868661093b610100840160e08501611598565b60025473ffffffffffffffffffffffffffffffffffffffff166109d260408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff1603610a4f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820181905260248201527f74617267657420616464726573732063616e6e6f742062652067617354616e6b60448201526064016102d9565b610a7e610a6260408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff163b151590565b610ae4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f43616e6e6f742063616c6c20454f41000000000000000000000000000000000060448201526064016102d9565b6000610af660408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610b1960408b018b611784565b610b2960e08d0160c08e01611598565b604051602001610b3b939291906117e9565b604080517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe081840301815290829052610b7391611822565b6000604051808303816000865af19150503d8060008114610bb0576040519150601f19603f3d011682016040523d82523d6000602084013e610bb5565b606091505b5050905080610c20576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601460248201527f45787465726e616c2063616c6c206661696c656400000000000000000000000060448201526064016102d9565b8860800135600103610d4b57610c3c60408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610c6260e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff16610c896101008c0160e08d01611598565b73ffffffffffffffffffffffffffffffffffffffff167f16242369046bb2c7332fc0c95dd99d425572accb515027a97630cadf2dfafb7c6101008d013515610cd6578c6101000135610cf8565b7f00000000000000000000000000000000000000000000000000000000000000005b8d6060016020810190610d0b9190611598565b6040805192835273ffffffffffffffffffffffffffffffffffffffff909116602083015281018990526060810188905260800160405180910390a4610e25565b610d5b60408a0160208b01611598565b73ffffffffffffffffffffffffffffffffffffffff16610d8160e08b0160c08c01611598565b73ffffffffffffffffffffffffffffffffffffffff16610da86101008c0160e08d01611598565b73ffffffffffffffffffffffffffffffffffffffff167fa3f8da1c59eb950d4098996c44c53e9692e2c5d73cd186cb415376d31d5ba7c6610def60808e0160608f01611598565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018a9052810188905260600160405180910390a45b505050505050505050565b60035473ffffffffffffffffffffffffffffffffffffffff163314610eb1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601d60248201527f4f6e6c792063616c6c61626c652062792067617354616e6b41646d696e00000060448201526064016102d9565b73ffffffffffffffffffffffffffffffffffffffff8116610f2e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601c60248201527f496e76616c69642067617354616e6b41646d696e20616464726573730000000060448201526064016102d9565b6003546040805173ffffffffffffffffffffffffffffffffffffffff928316815291831660208301527f7b4314d7a370be44c4e81707ded97705e0bd63e6bd46d7bbe386155e94436419910160405180910390a1600380547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff92909216919091179055565b60405180608001604052806052815260200161193d6052913981565b60006110107f0000000000000000000000000000000000000000000000000000000000000000611192565b905090565b60006110218535611192565b905060008161102f87611298565b80516020918201206040516110769392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b6040516020818303038152906040528051906020012090506000806110d18388888080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506113ca92505050565b909250905060008160048111156110ea576110ea61183e565b14801561112257508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b611188576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601160248201527f496e76616c6964207369676e617475726500000000000000000000000000000060448201526064016102d9565b5050505050505050565b600060405180608001604052806052815260200161193d605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a22836060820152608081018390523060a082015260c001604051602081830303815290604052805190602001209050919050565b60606040518060e0016040528060bf815260200161187e60bf91398051602091820120908335906112cf9060408601908601611598565b6112dc6040860186611784565b6040516112ea92919061186d565b6040519081900390206113036080870160608801611598565b608087013560a088013561131d60e08a0160c08b01611598565b61132e6101008b0160e08c01611598565b60408051602081019a909a5289019790975273ffffffffffffffffffffffffffffffffffffffff9586166060890152608088019490945291841660a087015260c086015260e08501528116610100848101919091529116610120838101919091529084013561014083810191909152908401356101608301528301356101808201526101a0016040516020818303038152906040529050919050565b60008082516041036114005760208301516040840151606085015160001a6113f487828585611438565b94509450505050611431565b8251604003611429576020830151604084015161141e868383611550565b935093505050611431565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a083111561146f5750600090506003611547565b8460ff16601b1415801561148757508460ff16601c14155b156114985750600090506004611547565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa1580156114ec573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff811661154057600060019250925050611547565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b0161158a87828885611438565b935093505050935093915050565b6000602082840312156115aa57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff811681146115ce57600080fd5b9392505050565b60008083601f8401126115e757600080fd5b50813567ffffffffffffffff8111156115ff57600080fd5b60208301915083602082850101111561143157600080fd5b600080600080600080600060a0888a03121561163257600080fd5b873567ffffffffffffffff8082111561164a57600080fd5b90890190610160828c03121561165f57600080fd5b9097506020890135908082111561167557600080fd5b6116818b838c016115d5565b909850965060408a013591508082111561169a57600080fd5b506116a78a828b016115d5565b989b979a5095989597966060870135966080013595509350505050565b60005b838110156116df5781810151838201526020016116c7565b838111156116ee576000848401525b50505050565b60208152600082518060208401526117138160408501602087016116c4565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b6000821982111561177f577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b500190565b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe18436030181126117b957600080fd5b83018035915067ffffffffffffffff8211156117d457600080fd5b60200191503681900382131561143157600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b600082516118348184602087016116c4565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b818382376000910190815291905056fe4d6574615478526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c75696e74323536207061796d656e74547970652c75696e74323536206d61784665652c6164647265737320757365722c616464726573732073706f6e736f722c75696e743235362073706f6e736f72436861696e49642c75696e74323536206e6f6e63652c75696e7432353620646561646c696e6529454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429a26469706673582212200829e042f3968f3d15244c2fcd2cf2474f87bc44d27ea57d67f040ec5458cc4b64736f6c634300080d0033",
  "devdoc": {
    "details": "Maliciously crafted transaction payloads could wipe out any funds left here.",
    "kind": "dev",
    "methods": {
      "metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,bytes32)": {
        "params": {
          "_gelatoFee": "Fee to be charged by Gelato relayer, denominated in _req.feeToken",
          "_req": "Relay request data",
          "_sponsorSignature": "EIP-712 compliant signature from _req.sponsor                          (can be same as _userSignature)",
          "_userSignature": "EIP-712 compliant signature from _req.user"
        }
      }
    },
    "title": "Gelato Meta Box contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "metaTxRequestGasTankFee((uint256,address,bytes,address,uint256,uint256,address,address,uint256,uint256,uint256),bytes,bytes,uint256,bytes32)": {
        "notice": "Relay request + async Gas Tank payment deductions (off-chain accounting)EOA that originates the tx, but does not necessarily pay the relayer"
      }
    },
    "notice": "This contract must NEVER hold funds!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 6,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 9,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 2440,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "nonce",
        "offset": 0,
        "slot": "1",
        "type": "t_mapping(t_address,t_uint256)"
      },
      {
        "astId": 2442,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "gasTank",
        "offset": 0,
        "slot": "2",
        "type": "t_address"
      },
      {
        "astId": 2444,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "gasTankAdmin",
        "offset": 0,
        "slot": "3",
        "type": "t_address"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}