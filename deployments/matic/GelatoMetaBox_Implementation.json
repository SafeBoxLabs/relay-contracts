{
  "address": "0xa0453c6AB71Fe3da89640EE2503326bd0899a589",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_gelato",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "sponsor",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "target",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "address",
          "name": "feeToken",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "fee",
          "type": "uint256"
        }
      ],
      "name": "ExecuteRequestSuccess",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "EIP712_DOMAIN_TYPE",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "REQUEST_TYPEHASH",
      "outputs": [
        {
          "internalType": "bytes32",
          "name": "",
          "type": "bytes32"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "chainId",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "chainId",
              "type": "uint256"
            },
            {
              "internalType": "address",
              "name": "target",
              "type": "address"
            },
            {
              "internalType": "bytes",
              "name": "data",
              "type": "bytes"
            },
            {
              "internalType": "address",
              "name": "feeToken",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "user",
              "type": "address"
            },
            {
              "internalType": "address",
              "name": "sponsor",
              "type": "address"
            },
            {
              "internalType": "uint256",
              "name": "nonce",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "deadline",
              "type": "uint256"
            },
            {
              "internalType": "bool",
              "name": "isEIP2771",
              "type": "bool"
            }
          ],
          "internalType": "struct Request",
          "name": "_req",
          "type": "tuple"
        },
        {
          "internalType": "bytes",
          "name": "_userSignature",
          "type": "bytes"
        },
        {
          "internalType": "uint256",
          "name": "_gelatoFee",
          "type": "uint256"
        }
      ],
      "name": "executeRequest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gelato",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "nonce",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x84f127c6a23497d9e79e509e6ef687aa09d80fc6c8d74b0a87f8c21fcf97ee8d",
  "receipt": {
    "to": null,
    "from": "0x3BEC8d1f7Bcb11F9c5cdF56E0d72a26040B2338F",
    "contractAddress": "0xa0453c6AB71Fe3da89640EE2503326bd0899a589",
    "transactionIndex": 26,
    "gasUsed": "943193",
    "logsBloom": "0x
    "blockHash": "0x762c591233fedd4544de07dabfc95ad35141e8b6ebd9af6f98ea1d1cfdcdfe51",
    "transactionHash": "0x84f127c6a23497d9e79e509e6ef687aa09d80fc6c8d74b0a87f8c21fcf97ee8d",
    "logs": [
      {
        "transactionIndex": 26,
        "blockNumber": 26038596,
        "transactionHash": "0x84f127c6a23497d9e79e509e6ef687aa09d80fc6c8d74b0a87f8c21fcf97ee8d",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000003bec8d1f7bcb11f9c5cdf56e0d72a26040b2338f",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000000b84c98ca75e76c000000000000000000000000000000000000000000000001158e460913d00000000000000000000000000000000000000000000000014cd19da0a92ea5747ee800000000000000000000000000000000000000000000000114d5f970495a1894000000000000000000000000000000000000000000014cd19e58f5c76fea6654",
        "logIndex": 123,
        "blockHash": "0x762c591233fedd4544de07dabfc95ad35141e8b6ebd9af6f98ea1d1cfdcdfe51"
      }
    ],
    "blockNumber": 26038596,
    "cumulativeGasUsed": "5336438",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x7598e84B2E114AB62CAB288CE5f7d5f6bad35BbA"
  ],
  "solcInputHash": "e0cb877b35d15474863a6199f5265cee",
  "metadata": "{\"compiler\":{\"version\":\"0.8.11+commit.d7f03943\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_gelato\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"fee\",\"type\":\"uint256\"}],\"name\":\"ExecuteRequestSuccess\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"EIP712_DOMAIN_TYPE\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"REQUEST_TYPEHASH\",\"outputs\":[{\"internalType\":\"bytes32\",\"name\":\"\",\"type\":\"bytes32\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"chainId\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"chainId\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"target\",\"type\":\"address\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"feeToken\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"sponsor\",\"type\":\"address\"},{\"internalType\":\"uint256\",\"name\":\"nonce\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"deadline\",\"type\":\"uint256\"},{\"internalType\":\"bool\",\"name\":\"isEIP2771\",\"type\":\"bool\"}],\"internalType\":\"struct Request\",\"name\":\"_req\",\"type\":\"tuple\"},{\"internalType\":\"bytes\",\"name\":\"_userSignature\",\"type\":\"bytes\"},{\"internalType\":\"uint256\",\"name\":\"_gelatoFee\",\"type\":\"uint256\"}],\"name\":\"executeRequest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gelato\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"nonce\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"details\":\"Maliciously crafted transaction payloads could wipe out any funds left here.\",\"kind\":\"dev\",\"methods\":{\"executeRequest((uint256,address,bytes,address,address,address,uint256,uint256,bool),bytes,uint256)\":{\"params\":{\"_gelatoFee\":\"Fee to be charged by Gelato relayer, denominated in _req.feeToken\",\"_req\":\"Relay request data\",\"_userSignature\":\"EIP-712 compliant signature from _req.user\"}}},\"title\":\"Gelato Meta Box contract\",\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"executeRequest((uint256,address,bytes,address,address,address,uint256,uint256,bool),bytes,uint256)\":{\"notice\":\"EOA that originates the tx, but does not necessarily pay the relayer\"}},\"notice\":\"This contract must NEVER hold funds!\",\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/GelatoMetaBox.sol\":\"GelatoMetaBox\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200000},\"remappings\":[]},\"sources\":{\"@openzeppelin/contracts/token/ERC20/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (token/ERC20/IERC20.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\\n\",\"keccak256\":\"0x61437cb513a887a1bbad006e7b1c8b414478427d33de47c5600af3c748f108da\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/Strings.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/Strings.sol)\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev String operations.\\n */\\nlibrary Strings {\\n    bytes16 private constant _HEX_SYMBOLS = \\\"0123456789abcdef\\\";\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` decimal representation.\\n     */\\n    function toString(uint256 value) internal pure returns (string memory) {\\n        // Inspired by OraclizeAPI's implementation - MIT licence\\n        // https://github.com/oraclize/ethereum-api/blob/b42146b063c7d6ee1358846c198246239e9360e8/oraclizeAPI_0.4.25.sol\\n\\n        if (value == 0) {\\n            return \\\"0\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 digits;\\n        while (temp != 0) {\\n            digits++;\\n            temp /= 10;\\n        }\\n        bytes memory buffer = new bytes(digits);\\n        while (value != 0) {\\n            digits -= 1;\\n            buffer[digits] = bytes1(uint8(48 + uint256(value % 10)));\\n            value /= 10;\\n        }\\n        return string(buffer);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation.\\n     */\\n    function toHexString(uint256 value) internal pure returns (string memory) {\\n        if (value == 0) {\\n            return \\\"0x00\\\";\\n        }\\n        uint256 temp = value;\\n        uint256 length = 0;\\n        while (temp != 0) {\\n            length++;\\n            temp >>= 8;\\n        }\\n        return toHexString(value, length);\\n    }\\n\\n    /**\\n     * @dev Converts a `uint256` to its ASCII `string` hexadecimal representation with fixed length.\\n     */\\n    function toHexString(uint256 value, uint256 length) internal pure returns (string memory) {\\n        bytes memory buffer = new bytes(2 * length + 2);\\n        buffer[0] = \\\"0\\\";\\n        buffer[1] = \\\"x\\\";\\n        for (uint256 i = 2 * length + 1; i > 1; --i) {\\n            buffer[i] = _HEX_SYMBOLS[value & 0xf];\\n            value >>= 4;\\n        }\\n        require(value == 0, \\\"Strings: hex length insufficient\\\");\\n        return string(buffer);\\n    }\\n}\\n\",\"keccak256\":\"0x32c202bd28995dd20c4347b7c6467a6d3241c74c8ad3edcbb610cd9205916c45\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts v4.4.1 (utils/cryptography/ECDSA.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../Strings.sol\\\";\\n\\n/**\\n * @dev Elliptic Curve Digital Signature Algorithm (ECDSA) operations.\\n *\\n * These functions can be used to verify that a message was signed by the holder\\n * of the private keys of a given address.\\n */\\nlibrary ECDSA {\\n    enum RecoverError {\\n        NoError,\\n        InvalidSignature,\\n        InvalidSignatureLength,\\n        InvalidSignatureS,\\n        InvalidSignatureV\\n    }\\n\\n    function _throwError(RecoverError error) private pure {\\n        if (error == RecoverError.NoError) {\\n            return; // no error: do nothing\\n        } else if (error == RecoverError.InvalidSignature) {\\n            revert(\\\"ECDSA: invalid signature\\\");\\n        } else if (error == RecoverError.InvalidSignatureLength) {\\n            revert(\\\"ECDSA: invalid signature length\\\");\\n        } else if (error == RecoverError.InvalidSignatureS) {\\n            revert(\\\"ECDSA: invalid signature 's' value\\\");\\n        } else if (error == RecoverError.InvalidSignatureV) {\\n            revert(\\\"ECDSA: invalid signature 'v' value\\\");\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature` or error string. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     *\\n     * Documentation for signature generation:\\n     * - with https://web3js.readthedocs.io/en/v1.3.4/web3-eth-accounts.html#sign[Web3.js]\\n     * - with https://docs.ethers.io/v5/api/signer/#Signer-signMessage[ethers]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(bytes32 hash, bytes memory signature) internal pure returns (address, RecoverError) {\\n        // Check the signature length\\n        // - case 65: r,s,v signature (standard)\\n        // - case 64: r,vs signature (cf https://eips.ethereum.org/EIPS/eip-2098) _Available since v4.1._\\n        if (signature.length == 65) {\\n            bytes32 r;\\n            bytes32 s;\\n            uint8 v;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                s := mload(add(signature, 0x40))\\n                v := byte(0, mload(add(signature, 0x60)))\\n            }\\n            return tryRecover(hash, v, r, s);\\n        } else if (signature.length == 64) {\\n            bytes32 r;\\n            bytes32 vs;\\n            // ecrecover takes the signature parameters, and the only way to get them\\n            // currently is to use assembly.\\n            assembly {\\n                r := mload(add(signature, 0x20))\\n                vs := mload(add(signature, 0x40))\\n            }\\n            return tryRecover(hash, r, vs);\\n        } else {\\n            return (address(0), RecoverError.InvalidSignatureLength);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the address that signed a hashed message (`hash`) with\\n     * `signature`. This address can then be used for verification purposes.\\n     *\\n     * The `ecrecover` EVM opcode allows for malleable (non-unique) signatures:\\n     * this function rejects them by requiring the `s` value to be in the lower\\n     * half order, and the `v` value to be either 27 or 28.\\n     *\\n     * IMPORTANT: `hash` _must_ be the result of a hash operation for the\\n     * verification to be secure: it is possible to craft signatures that\\n     * recover to arbitrary addresses for non-hashed data. A safe way to ensure\\n     * this is by receiving a hash of the original message (which may otherwise\\n     * be too long), and then calling {toEthSignedMessageHash} on it.\\n     */\\n    function recover(bytes32 hash, bytes memory signature) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, signature);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `r` and `vs` short-signature fields separately.\\n     *\\n     * See https://eips.ethereum.org/EIPS/eip-2098[EIP-2098 short signatures]\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address, RecoverError) {\\n        bytes32 s;\\n        uint8 v;\\n        assembly {\\n            s := and(vs, 0x7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff)\\n            v := add(shr(255, vs), 27)\\n        }\\n        return tryRecover(hash, v, r, s);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `r and `vs` short-signature fields separately.\\n     *\\n     * _Available since v4.2._\\n     */\\n    function recover(\\n        bytes32 hash,\\n        bytes32 r,\\n        bytes32 vs\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, r, vs);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-tryRecover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function tryRecover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address, RecoverError) {\\n        // EIP-2 still allows signature malleability for ecrecover(). Remove this possibility and make the signature\\n        // unique. Appendix F in the Ethereum Yellow paper (https://ethereum.github.io/yellowpaper/paper.pdf), defines\\n        // the valid range for s in (301): 0 < s < secp256k1n \\u00f7 2 + 1, and for v in (302): v \\u2208 {27, 28}. Most\\n        // signatures from current libraries generate a unique signature with an s-value in the lower half order.\\n        //\\n        // If your library generates malleable signatures, such as s-values in the upper range, calculate a new s-value\\n        // with 0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFEBAAEDCE6AF48A03BBFD25E8CD0364141 - s1 and flip v from 27 to 28 or\\n        // vice versa. If your library also generates signatures with 0/1 for v instead 27/28, add 27 to v to accept\\n        // these malleable signatures as well.\\n        if (uint256(s) > 0x7FFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF5D576E7357A4501DDFE92F46681B20A0) {\\n            return (address(0), RecoverError.InvalidSignatureS);\\n        }\\n        if (v != 27 && v != 28) {\\n            return (address(0), RecoverError.InvalidSignatureV);\\n        }\\n\\n        // If the signature is valid (and not malleable), return the signer address\\n        address signer = ecrecover(hash, v, r, s);\\n        if (signer == address(0)) {\\n            return (address(0), RecoverError.InvalidSignature);\\n        }\\n\\n        return (signer, RecoverError.NoError);\\n    }\\n\\n    /**\\n     * @dev Overload of {ECDSA-recover} that receives the `v`,\\n     * `r` and `s` signature fields separately.\\n     */\\n    function recover(\\n        bytes32 hash,\\n        uint8 v,\\n        bytes32 r,\\n        bytes32 s\\n    ) internal pure returns (address) {\\n        (address recovered, RecoverError error) = tryRecover(hash, v, r, s);\\n        _throwError(error);\\n        return recovered;\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from a `hash`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes32 hash) internal pure returns (bytes32) {\\n        // 32 is the length in bytes of hash,\\n        // enforced by the type signature above\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n32\\\", hash));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Message, created from `s`. This\\n     * produces hash corresponding to the one signed with the\\n     * https://eth.wiki/json-rpc/API#eth_sign[`eth_sign`]\\n     * JSON-RPC method as part of EIP-191.\\n     *\\n     * See {recover}.\\n     */\\n    function toEthSignedMessageHash(bytes memory s) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19Ethereum Signed Message:\\\\n\\\", Strings.toString(s.length), s));\\n    }\\n\\n    /**\\n     * @dev Returns an Ethereum Signed Typed Data, created from a\\n     * `domainSeparator` and a `structHash`. This produces hash corresponding\\n     * to the one signed with the\\n     * https://eips.ethereum.org/EIPS/eip-712[`eth_signTypedData`]\\n     * JSON-RPC method as part of EIP-712.\\n     *\\n     * See {recover}.\\n     */\\n    function toTypedDataHash(bytes32 domainSeparator, bytes32 structHash) internal pure returns (bytes32) {\\n        return keccak256(abi.encodePacked(\\\"\\\\x19\\\\x01\\\", domainSeparator, structHash));\\n    }\\n}\\n\",\"keccak256\":\"0xe9e291de7ffe06e66503c6700b1bb84ff6e0989cbb974653628d8994e7c97f03\",\"license\":\"MIT\"},\"contracts/GelatoMetaBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nimport {Request} from \\\"./structs/RequestTypes.sol\\\";\\nimport {NATIVE_TOKEN} from \\\"./constants/Tokens.sol\\\";\\nimport {IGelatoMetaBox} from \\\"./interfaces/IGelatoMetaBox.sol\\\";\\nimport {Proxied} from \\\"./vendor/hardhat-deploy/Proxied.sol\\\";\\nimport {IERC20} from \\\"@openzeppelin/contracts/token/ERC20/IERC20.sol\\\";\\nimport {ECDSA} from \\\"@openzeppelin/contracts/utils/cryptography/ECDSA.sol\\\";\\n\\n/// @title Gelato Meta Box contract\\n/// @notice This contract must NEVER hold funds!\\n/// @dev    Maliciously crafted transaction payloads could wipe out any funds left here.\\ncontract GelatoMetaBox is IGelatoMetaBox, Proxied {\\n    bytes32 public constant REQUEST_TYPEHASH =\\n        keccak256(\\n            bytes(\\n                // solhint-disable-next-line max-line-length\\n                \\\"Request(uint256 chainId,address target,bytes data,address feeToken,address user,address sponsor,uint256 nonce,uint256 deadline,bool isEIP2771)\\\"\\n            )\\n        );\\n    // solhint-disable-next-line max-line-length\\n    string public constant EIP712_DOMAIN_TYPE =\\n        \\\"EIP712Domain(string name,string version,uint256 chainId,address verifyingContract)\\\";\\n\\n    address public immutable gelato;\\n    uint256 public immutable chainId;\\n\\n    mapping(address => uint256) public nonce;\\n\\n    event ExecuteRequestSuccess(\\n        address indexed sponsor,\\n        address indexed user,\\n        address indexed target,\\n        address feeToken,\\n        uint256 fee\\n    );\\n\\n    modifier onlyGelato() {\\n        require(msg.sender == gelato, \\\"Only callable by gelato\\\");\\n        _;\\n    }\\n\\n    constructor(address _gelato) {\\n        gelato = _gelato;\\n\\n        uint256 _chainId;\\n        // solhint-disable-next-line no-inline-assembly\\n        assembly {\\n            _chainId := chainid()\\n        }\\n\\n        chainId = _chainId;\\n    }\\n\\n    /// @param _req Relay request data\\n    /// @param _userSignature EIP-712 compliant signature from _req.user\\n    /// @notice   EOA that originates the tx, but does not necessarily pay the relayer\\n    /// @param _gelatoFee Fee to be charged by Gelato relayer, denominated in _req.feeToken\\n    // solhint-disable-next-line function-max-lines\\n    function executeRequest(\\n        Request calldata _req,\\n        bytes calldata _userSignature,\\n        uint256 _gelatoFee\\n    ) external override onlyGelato {\\n        require(\\n            // solhint-disable-next-line not-rely-on-time\\n            _req.deadline == 0 || _req.deadline >= block.timestamp,\\n            \\\"Request expired\\\"\\n        );\\n\\n        require(_req.chainId == chainId, \\\"Wrong chainId\\\");\\n\\n        require(_req.nonce == nonce[_req.user], \\\"Invalid nonce\\\");\\n\\n        _verifyUserSignature(_req, _userSignature, _req.user);\\n\\n        nonce[_req.user]++;\\n\\n        (bool success, ) = _req.target.call(\\n            _req.isEIP2771 ? abi.encodePacked(_req.data, _req.user) : _req.data\\n        );\\n        require(success, \\\"Request call failed\\\");\\n\\n        emit ExecuteRequestSuccess(\\n            _req.sponsor,\\n            _req.user,\\n            _req.target,\\n            _req.feeToken,\\n            _gelatoFee\\n        );\\n    }\\n\\n    function _verifyUserSignature(\\n        Request calldata _req,\\n        bytes calldata _userSignature,\\n        address _user\\n    ) private view {\\n        bytes32 domainSeparator = keccak256(\\n            abi.encode(\\n                keccak256(bytes(EIP712_DOMAIN_TYPE)),\\n                keccak256(bytes(\\\"GelatoMetaBox\\\")),\\n                keccak256(bytes(\\\"V1\\\")),\\n                bytes32(chainId),\\n                address(this)\\n            )\\n        );\\n\\n        bytes32 digest = keccak256(\\n            abi.encodePacked(\\n                \\\"\\\\x19\\\\x01\\\",\\n                domainSeparator,\\n                keccak256(_abiEncodeRequest(_req))\\n            )\\n        );\\n\\n        (address recovered, ECDSA.RecoverError error) = ECDSA.tryRecover(\\n            digest,\\n            _userSignature\\n        );\\n        require(\\n            error == ECDSA.RecoverError.NoError && recovered == _user,\\n            \\\"Invalid user signature\\\"\\n        );\\n    }\\n\\n    function _abiEncodeRequest(Request calldata _req)\\n        private\\n        pure\\n        returns (bytes memory encodedReq)\\n    {\\n        encodedReq = abi.encode(\\n            REQUEST_TYPEHASH,\\n            _req.chainId,\\n            _req.target,\\n            keccak256(_req.data),\\n            _req.feeToken,\\n            _req.user,\\n            _req.sponsor,\\n            _req.nonce,\\n            _req.deadline,\\n            _req.isEIP2771\\n        );\\n    }\\n}\\n\",\"keccak256\":\"0x7c5f78fde8dc6a20b5d272800ceee42f832c5577040eec89ad2d08a45103c9a4\",\"license\":\"MIT\"},\"contracts/constants/Tokens.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\naddress constant NATIVE_TOKEN = 0xEeeeeEeeeEeEeeEeEeEeeEEEeeeeEeeeeeeeEEeE;\\n\",\"keccak256\":\"0xf9eb7c0720bc47def3182c068f594f285bfe16999e5bd05c54fbe466f689dcbc\",\"license\":\"MIT\"},\"contracts/interfaces/IGelatoMetaBox.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\nimport {Request} from \\\"../structs/RequestTypes.sol\\\";\\n\\ninterface IGelatoMetaBox {\\n    function executeRequest(\\n        Request calldata _req,\\n        bytes calldata _userSignature,\\n        uint256 _gelatoFee\\n    ) external;\\n}\\n\",\"keccak256\":\"0x73276512d08a6f98e3714bc154cb0efeb026dbfc03ccf4c81167504902288a70\",\"license\":\"MIT\"},\"contracts/structs/RequestTypes.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity 0.8.11;\\n\\nstruct Request {\\n    uint256 chainId;\\n    address target;\\n    bytes data;\\n    address feeToken;\\n    address user;\\n    address sponsor; // could be same as user\\n    uint256 nonce;\\n    uint256 deadline;\\n    bool isEIP2771;\\n}\\n\",\"keccak256\":\"0xcffb7df2e387815454e6d2580f5b6f03cedf8e99f5f1f4cd6a864acfe3ff141c\",\"license\":\"MIT\"},\"contracts/vendor/hardhat-deploy/Proxied.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\npragma solidity ^0.8.0;\\n\\nabstract contract Proxied {\\n    // solhint-disable-next-line max-line-length\\n    /// @notice to be used by initialisation / postUpgrade function so that only the proxy's admin can execute them\\n    /// It also allows these functions to be called inside a contructor\\n    /// even if the contract is meant to be used without proxy\\n    modifier proxied() {\\n        address proxyAdminAddress = _proxyAdmin();\\n        // With hardhat-deploy proxies\\n        // the proxyAdminAddress is zero only for the implementation contract\\n        // if the implementation contract want to be used as a standalone/immutable contract\\n        // it simply has to execute the `proxied` function\\n        // This ensure the proxyAdminAddress is never zero post deployment\\n        // And allow you to keep the same code for both proxied contract and immutable contract\\n        if (proxyAdminAddress == address(0)) {\\n            // ensure can not be called twice when used outside of proxy : no admin\\n            // solhint-disable-next-line security/no-inline-assembly\\n            assembly {\\n                sstore(\\n                    0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103,\\n                    0xFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF\\n                )\\n            }\\n        } else {\\n            require(msg.sender == proxyAdminAddress);\\n        }\\n        _;\\n    }\\n\\n    modifier onlyProxyAdmin() {\\n        require(msg.sender == _proxyAdmin(), \\\"NOT_AUTHORIZED\\\");\\n        _;\\n    }\\n\\n    function _proxyAdmin() internal view returns (address ownerAddress) {\\n        // solhint-disable-next-line security/no-inline-assembly\\n        assembly {\\n            ownerAddress := sload(\\n                0xb53127684a568b3173ae13b9f8a6016e243e63b6e8ee1178d6a717850b5d6103\\n            )\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x41a0b2fa7a61b91ebe122ce6443fbf1d0849c019e7b4dec5f02f1a8bc8b1fd8b\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x60c060405234801561001057600080fd5b506040516110d73803806110d783398101604081905261002f91610044565b6001600160a01b03166080524660a052610074565b60006020828403121561005657600080fd5b81516001600160a01b038116811461006d57600080fd5b9392505050565b60805160a05161102a6100ad6000396000818161011001528181610272015261078a01526000818160910152610167015261102a6000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c80639a8a0592116100505780639a8a05921461010b5780639e39b73e14610132578063c3f28abd1461013a57600080fd5b80633a6a084214610077578063573ea5751461008c57806370ae92d2146100dd575b600080fd5b61008a610085366004610c35565b61014f565b005b6100b37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fd6100eb366004610cdb565b60006020819052908152604090205481565b6040519081526020016100d4565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd610670565b610142610693565b6040516100d49190610d48565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b60e084013515806102085750428460e0013510155b61026e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526571756573742065787069726564000000000000000000000000000000000060448201526064016101ea565b83357f0000000000000000000000000000000000000000000000000000000000000000146102f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e49640000000000000000000000000000000000000060448201526064016101ea565b60008061030b60a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460c00135146103b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e63650000000000000000000000000000000000000060448201526064016101ea565b6103cd8484846103c860a0840160808501610cdb565b6106af565b6000806103e060a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600090812080549161041483610d99565b909155506000905061042c6040860160208701610cdb565b73ffffffffffffffffffffffffffffffffffffffff1661045461012087016101008801610df9565b61049f576104656040870187610e1b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104de92505050565b6104ac6040870187610e1b565b6104bc60a0890160808a01610cdb565b6040516020016104ce93929190610e80565b6040516020818303038152906040525b6040516104eb9190610eb9565b6000604051808303816000865af19150503d8060008114610528576040519150601f19603f3d011682016040523d82523d6000602084013e61052d565b606091505b5050905080610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f526571756573742063616c6c206661696c65640000000000000000000000000060448201526064016101ea565b6105a86040860160208701610cdb565b73ffffffffffffffffffffffffffffffffffffffff166105ce60a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff166105f460c0880160a08901610cdb565b73ffffffffffffffffffffffffffffffffffffffff167fa2b715c090f75dc0b3d840e7406e89862781af6914b12a1f4fc25a9874d2a3ea61063b60808a0160608b01610cdb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018890520160405180910390a45050505050565b6040518060c00160405280608e8152602001610f67608e91398051906020012081565b604051806080016040528060528152602001610f156052913981565b6000604051806080016040528060528152602001610f15605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a228360608201527f000000000000000000000000000000000000000000000000000000000000000060808201523060a082015260c0016040516020818303038152906040528051906020012090506000816107db8761093e565b80516020918201206040516108229392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905060008061087d8388888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a6592505050565b9092509050600081600481111561089657610896610ed5565b1480156108ce57508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642075736572207369676e61747572650000000000000000000060448201526064016101ea565b5050505050505050565b60606040518060c00160405280608e8152602001610f67608e91398051602091820120908335906109759060408601908601610cdb565b6109826040860186610e1b565b604051610990929190610f04565b6040519081900390206109a96080870160608801610cdb565b6109b960a0880160808901610cdb565b6109c960c0890160a08a01610cdb565b60c089013560e08a01356109e56101208c016101008d01610df9565b60408051602081019b909b528a019890985273ffffffffffffffffffffffffffffffffffffffff96871660608a0152608089019590955292851660a088015290841660c087015290921660e08501526101008401919091526101208301521515610140820152610160016040516020818303038152906040529050919050565b600080825160411415610a9c5760208301516040840151606085015160001a610a9087828585610ad5565b94509450505050610ace565b825160401415610ac65760208301516040840151610abb868383610bed565b935093505050610ace565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b0c5750600090506003610be4565b8460ff16601b14158015610b2457508460ff16601c14155b15610b355750600090506004610be4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b89573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610bdd57600060019250925050610be4565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01610c2787828885610ad5565b935093505050935093915050565b60008060008060608587031215610c4b57600080fd5b843567ffffffffffffffff80821115610c6357600080fd5b908601906101208289031215610c7857600080fd5b90945060208601359080821115610c8e57600080fd5b818701915087601f830112610ca257600080fd5b813581811115610cb157600080fd5b886020828501011115610cc357600080fd5b95986020929092019750949560400135945092505050565b600060208284031215610ced57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d1157600080fd5b9392505050565b60005b83811015610d33578181015183820152602001610d1b565b83811115610d42576000848401525b50505050565b6020815260008251806020840152610d67816040850160208701610d18565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610e0b57600080fd5b81358015158114610d1157600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e5057600080fd5b83018035915067ffffffffffffffff821115610e6b57600080fd5b602001915036819003821315610ace57600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60008251610ecb818460208701610d18565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b818382376000910190815291905056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c6164647265737320757365722c616464726573732073706f6e736f722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c626f6f6c2069734549503237373129a2646970667358221220206d8f2f26a06319573f7f5abc6e4759206db2496ec7c09f7caca650ed821bc164736f6c634300080b0033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106100725760003560e01c80639a8a0592116100505780639a8a05921461010b5780639e39b73e14610132578063c3f28abd1461013a57600080fd5b80633a6a084214610077578063573ea5751461008c57806370ae92d2146100dd575b600080fd5b61008a610085366004610c35565b61014f565b005b6100b37f000000000000000000000000000000000000000000000000000000000000000081565b60405173ffffffffffffffffffffffffffffffffffffffff90911681526020015b60405180910390f35b6100fd6100eb366004610cdb565b60006020819052908152604090205481565b6040519081526020016100d4565b6100fd7f000000000000000000000000000000000000000000000000000000000000000081565b6100fd610670565b610142610693565b6040516100d49190610d48565b3373ffffffffffffffffffffffffffffffffffffffff7f000000000000000000000000000000000000000000000000000000000000000016146101f3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601760248201527f4f6e6c792063616c6c61626c652062792067656c61746f00000000000000000060448201526064015b60405180910390fd5b60e084013515806102085750428460e0013510155b61026e576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600f60248201527f526571756573742065787069726564000000000000000000000000000000000060448201526064016101ea565b83357f0000000000000000000000000000000000000000000000000000000000000000146102f8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f57726f6e6720636861696e49640000000000000000000000000000000000000060448201526064016101ea565b60008061030b60a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020548460c00135146103b2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152600d60248201527f496e76616c6964206e6f6e63650000000000000000000000000000000000000060448201526064016101ea565b6103cd8484846103c860a0840160808501610cdb565b6106af565b6000806103e060a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff1681526020810191909152604001600090812080549161041483610d99565b909155506000905061042c6040860160208701610cdb565b73ffffffffffffffffffffffffffffffffffffffff1661045461012087016101008801610df9565b61049f576104656040870187610e1b565b8080601f0160208091040260200160405190810160405280939291908181526020018383808284376000920191909152506104de92505050565b6104ac6040870187610e1b565b6104bc60a0890160808a01610cdb565b6040516020016104ce93929190610e80565b6040516020818303038152906040525b6040516104eb9190610eb9565b6000604051808303816000865af19150503d8060008114610528576040519150601f19603f3d011682016040523d82523d6000602084013e61052d565b606091505b5050905080610598576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601360248201527f526571756573742063616c6c206661696c65640000000000000000000000000060448201526064016101ea565b6105a86040860160208701610cdb565b73ffffffffffffffffffffffffffffffffffffffff166105ce60a0870160808801610cdb565b73ffffffffffffffffffffffffffffffffffffffff166105f460c0880160a08901610cdb565b73ffffffffffffffffffffffffffffffffffffffff167fa2b715c090f75dc0b3d840e7406e89862781af6914b12a1f4fc25a9874d2a3ea61063b60808a0160608b01610cdb565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252602082018890520160405180910390a45050505050565b6040518060c00160405280608e8152602001610f67608e91398051906020012081565b604051806080016040528060528152602001610f156052913981565b6000604051806080016040528060528152602001610f15605291398051602091820120604080518082018252600d81527f47656c61746f4d657461426f78000000000000000000000000000000000000009084015280518082018252600281527f5631000000000000000000000000000000000000000000000000000000000000908401528051928301919091527f919f16ca789a3e2bbe70bbe2c4e0a9ff8affaab44711ff9ce735a3f4eef9b2d9908201527f4c23426613a5dc69e08fbd2787e6210aa679d4522e95a89d4dd88c4fd13a228360608201527f000000000000000000000000000000000000000000000000000000000000000060808201523060a082015260c0016040516020818303038152906040528051906020012090506000816107db8761093e565b80516020918201206040516108229392017f190100000000000000000000000000000000000000000000000000000000000081526002810192909252602282015260420190565b60405160208183030381529060405280519060200120905060008061087d8388888080601f016020809104026020016040519081016040528093929190818152602001838380828437600092019190915250610a6592505050565b9092509050600081600481111561089657610896610ed5565b1480156108ce57508473ffffffffffffffffffffffffffffffffffffffff168273ffffffffffffffffffffffffffffffffffffffff16145b610934576040517f08c379a000000000000000000000000000000000000000000000000000000000815260206004820152601660248201527f496e76616c69642075736572207369676e61747572650000000000000000000060448201526064016101ea565b5050505050505050565b60606040518060c00160405280608e8152602001610f67608e91398051602091820120908335906109759060408601908601610cdb565b6109826040860186610e1b565b604051610990929190610f04565b6040519081900390206109a96080870160608801610cdb565b6109b960a0880160808901610cdb565b6109c960c0890160a08a01610cdb565b60c089013560e08a01356109e56101208c016101008d01610df9565b60408051602081019b909b528a019890985273ffffffffffffffffffffffffffffffffffffffff96871660608a0152608089019590955292851660a088015290841660c087015290921660e08501526101008401919091526101208301521515610140820152610160016040516020818303038152906040529050919050565b600080825160411415610a9c5760208301516040840151606085015160001a610a9087828585610ad5565b94509450505050610ace565b825160401415610ac65760208301516040840151610abb868383610bed565b935093505050610ace565b506000905060025b9250929050565b6000807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0831115610b0c5750600090506003610be4565b8460ff16601b14158015610b2457508460ff16601c14155b15610b355750600090506004610be4565b6040805160008082526020820180845289905260ff881692820192909252606081018690526080810185905260019060a0016020604051602081039080840390855afa158015610b89573d6000803e3d6000fd5b50506040517fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0015191505073ffffffffffffffffffffffffffffffffffffffff8116610bdd57600060019250925050610be4565b9150600090505b94509492505050565b6000807f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff831660ff84901c601b01610c2787828885610ad5565b935093505050935093915050565b60008060008060608587031215610c4b57600080fd5b843567ffffffffffffffff80821115610c6357600080fd5b908601906101208289031215610c7857600080fd5b90945060208601359080821115610c8e57600080fd5b818701915087601f830112610ca257600080fd5b813581811115610cb157600080fd5b886020828501011115610cc357600080fd5b95986020929092019750949560400135945092505050565b600060208284031215610ced57600080fd5b813573ffffffffffffffffffffffffffffffffffffffff81168114610d1157600080fd5b9392505050565b60005b83811015610d33578181015183820152602001610d1b565b83811115610d42576000848401525b50505050565b6020815260008251806020840152610d67816040850160208701610d18565b601f017fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe0169190910160400192915050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff821415610df2577f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b5060010190565b600060208284031215610e0b57600080fd5b81358015158114610d1157600080fd5b60008083357fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffe1843603018112610e5057600080fd5b83018035915067ffffffffffffffff821115610e6b57600080fd5b602001915036819003821315610ace57600080fd5b8284823760609190911b7fffffffffffffffffffffffffffffffffffffffff000000000000000000000000169101908152601401919050565b60008251610ecb818460208701610d18565b9190910192915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602160045260246000fd5b818382376000910190815291905056fe454950373132446f6d61696e28737472696e67206e616d652c737472696e672076657273696f6e2c75696e7432353620636861696e49642c6164647265737320766572696679696e67436f6e747261637429526571756573742875696e7432353620636861696e49642c61646472657373207461726765742c627974657320646174612c6164647265737320666565546f6b656e2c6164647265737320757365722c616464726573732073706f6e736f722c75696e74323536206e6f6e63652c75696e7432353620646561646c696e652c626f6f6c2069734549503237373129a2646970667358221220206d8f2f26a06319573f7f5abc6e4759206db2496ec7c09f7caca650ed821bc164736f6c634300080b0033",
  "devdoc": {
    "details": "Maliciously crafted transaction payloads could wipe out any funds left here.",
    "kind": "dev",
    "methods": {
      "executeRequest((uint256,address,bytes,address,address,address,uint256,uint256,bool),bytes,uint256)": {
        "params": {
          "_gelatoFee": "Fee to be charged by Gelato relayer, denominated in _req.feeToken",
          "_req": "Relay request data",
          "_userSignature": "EIP-712 compliant signature from _req.user"
        }
      }
    },
    "title": "Gelato Meta Box contract",
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "executeRequest((uint256,address,bytes,address,address,address,uint256,uint256,bool),bytes,uint256)": {
        "notice": "EOA that originates the tx, but does not necessarily pay the relayer"
      }
    },
    "notice": "This contract must NEVER hold funds!",
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 708,
        "contract": "contracts/GelatoMetaBox.sol:GelatoMetaBox",
        "label": "nonce",
        "offset": 0,
        "slot": "0",
        "type": "t_mapping(t_address,t_uint256)"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_mapping(t_address,t_uint256)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}